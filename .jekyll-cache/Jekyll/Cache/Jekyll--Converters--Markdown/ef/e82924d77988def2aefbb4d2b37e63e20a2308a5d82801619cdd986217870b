I"[<p><a href="/spring/spring-official-di/">스프링 공식문서 읽기 - DI편</a>에 이어서 <code class="highlighter-rouge">DispatcherServlet</code>를 읽어봤다. <code class="highlighter-rouge">Locale</code>, <code class="highlighter-rouge">Theme</code>는 많은 부분 건너뛰었다.</p>

<h1 id="dispatcherservlet">DispatcherServlet</h1>

<p>다른 웹 프레임워크처럼, Spring MVC는 중앙 서블릿인 <code class="highlighter-rouge">DispatcherServlet</code>을 프론트 컨트롤러로 활용한다. <code class="highlighter-rouge">DispatcherServlet</code>은 요청 처리를 위한 공통 알고리즘을 제공하고, 실제 작업은 구성 가능한 요소에 의해 진행되도록 위임한다. 이 모델은 유연하며 다양한 동작 흐름을 제공한다.</p>

<p>다른 <code class="highlighter-rouge">Servlet</code>들 처럼 <code class="highlighter-rouge">DispatcherServlet</code>은 서블릿 스펙에 따라 설정을 선언하고 매핑해야 한다. <code class="highlighter-rouge">DispatcherServlet</code>은 스프링 설정을 사용하여 <code class="highlighter-rouge">Request Mapping</code>, <code class="highlighter-rouge">View Resolution</code>, <code class="highlighter-rouge">Exception handling</code>에 필요한 요소들을 확인한다.</p>

<h2 id="context-hierarchy">Context Hierarchy</h2>

<p><code class="highlighter-rouge">DispatcherServlet</code>에는 <code class="highlighter-rouge">WebApplicationContext</code>(ApplicationContext의 확장) 가 필요하다. <code class="highlighter-rouge">WebApplicationContext</code>는 <code class="highlighter-rouge">ServletContext</code>, <code class="highlighter-rouge">Servlet</code>과 연결고리를 갖고 있다.</p>

<p>대부분의 어플리케이션에는 하나의 WebApplicationContext만 있어도 간단하고 충분하다. 하나의 WebApplicationContext가 각각의 하위 WebApplicationContext 구성과 함께 여러 DispatcherServlet 인스턴스에서 공유되는 컨텍스트 계층 구조를 가질 수도 있다.</p>

<p>Root WebApplicationContext는 보통 <code class="highlighter-rouge">Infrastructure Bean</code>을 포함한다. 여러 서블릿들이 공유해야 하는 <code class="highlighter-rouge">Data Repository</code>나 <code class="highlighter-rouge">Business Service</code>들이다. 이 빈들은 하위 WebApplicationContext로 효과적으로 상속되거나 재구성된다.</p>

<p><img src="/assets/mvc-context-hierarchy.png" alt="context-hierarchy" /></p>

<h2 id="special-bean-types">Special Bean Types</h2>

<p>DispatcherServlet은 다음 표에 있는 빈들을 사용한다.</p>

<table>
  <thead>
    <tr>
      <th>Bean Type</th>
      <th>Explanation</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>HandlerMapping</td>
      <td>요청을 핸들러에 매핑한다. 핸들러는 전처리나 후처리를 위한 Interceptor를 가질 수 있다. <code class="highlighter-rouge">HandlerMapping</code>의 구현 디테일에 따라 매핑된다.  <br /> HandlerMapping의 두 주요 구현체는 <code class="highlighter-rouge">RequestMappingHandlerMapping</code> (<code class="highlighter-rouge">@RequestMapping</code>), <code class="highlighter-rouge">SimpleUrlHandlerMapping</code>이다.</td>
    </tr>
    <tr>
      <td>HandlerAdapter</td>
      <td>DispatcherServlet이 매핑된 핸들러를 호출하는 것을 돕는다. 핸들러가 실제로 호출되는것과 관계 없이 수행된다.(<code class="highlighter-rouge">Adapter</code>에 주목) <br /> HandlerAdapter의 주된 목표는 DispatcherServlet이 요청을 위임하는데 추상화를 제공하는 것이다.</td>
    </tr>
    <tr>
      <td>HandlerExceptionResolver</td>
      <td>요청을 핸들러에 매핑하거나, HTML에러를 보여주거나, 기타 동작 중에 예외를 인지하고 결정하는 전략을 담당한다.</td>
    </tr>
    <tr>
      <td>ViewResolver</td>
      <td>핸들러가 반환한 문자열 기반으로 뷰 네임을 결정하고 응답을 렌더링한다.</td>
    </tr>
    <tr>
      <td>LocaleResolver</td>
      <td>글로벌 서비스를 제공할 수 있도록, Locale을 결정한다.</td>
    </tr>
    <tr>
      <td>ThemeResolver</td>
      <td>어플리케이션이 사용할 수 있는 테마를 결정한다.</td>
    </tr>
    <tr>
      <td>MultipartResolver</td>
      <td>Multi-part 요청(파일 요청)에 대해 추상화된 파싱방법 또는 파싱 라이브러리를 제공한다.</td>
    </tr>
    <tr>
      <td>FlashMapManager</td>
      <td>input, output FlashMap을 저장하고 불러온다. FlashMap은 어떤 요청으로부터 다른 요청으로 attributes들을 전달할 수 있는데, 주로 Redirect에 사용된다.</td>
    </tr>
  </tbody>
</table>

<h2 id="web-mvc-config">Web MVC Config</h2>

<p>어플리케이션은 위 표에 있는 Special Bean들, 요청을 처리하기 위한 빈들을 추가하거나 제어할 수 있다. DispatcherServlet은 WebApplicationContext를 통해서 이 빈들을 체크한다. 이 과정이 실패하면 <code class="highlighter-rouge">DispatcherServlet.properties</code>에 있는 기본값으로 설정된다.</p>

<p>대부분의 경우, MVC Config가 적절한 시작점이 된다. MVC Config는 XML이나 자바 코드로 필요한 빈들을 정의할 수 있다.</p>

<h2 id="servlet-config">Servlet Config</h2>

<p>서블릿 3.0 이상의 환경에서, 서블릿 컨테이너를 <code class="highlighter-rouge">web.xml</code> 대신 프로그래밍적으로 설정할 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.web.WebApplicationInitializer</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyWebApplicationInitializer</span> <span class="kd">implements</span> <span class="nc">WebApplicationInitializer</span> <span class="o">{</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onStartup</span><span class="o">(</span><span class="nc">ServletContext</span> <span class="n">container</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">XmlWebApplicationContext</span> <span class="n">appContext</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">XmlWebApplicationContext</span><span class="o">();</span>
        <span class="n">appContext</span><span class="o">.</span><span class="na">setConfigLocation</span><span class="o">(</span><span class="s">"/WEB-INF/spring/dispatcher-config.xml"</span><span class="o">);</span>

        <span class="nc">ServletRegistration</span><span class="o">.</span><span class="na">Dynamic</span> <span class="n">registration</span> <span class="o">=</span> <span class="n">container</span><span class="o">.</span><span class="na">addServlet</span><span class="o">(</span><span class="s">"dispatcher"</span><span class="o">,</span> <span class="k">new</span> <span class="nc">DispatcherServlet</span><span class="o">(</span><span class="n">appContext</span><span class="o">));</span>
        <span class="n">registration</span><span class="o">.</span><span class="na">setLoadOnStartup</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
        <span class="n">registration</span><span class="o">.</span><span class="na">addMapping</span><span class="o">(</span><span class="s">"/"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">WebApplicationInitializer</code> 는 Servlet3 컨테이너를 시작하기 위해 제공되는 인터페이스다. <code class="highlighter-rouge">AbstractDispatcherServletInitializer</code>는 이 인터페이스를 구현하는 기본 템플릿이다. 더 쉬운 자동 설정을 지원한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyWebAppInitializer</span> <span class="kd">extends</span> <span class="nc">AbstractAnnotationConfigDispatcherServletInitializer</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="nc">Class</span><span class="o">&lt;?&gt;[]</span> <span class="n">getRootConfigClasses</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="nc">Class</span><span class="o">&lt;?&gt;[]</span> <span class="n">getServletConfigClasses</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">Class</span><span class="o">&lt;?&gt;[]</span> <span class="o">{</span> <span class="nc">MyWebConfig</span><span class="o">.</span><span class="na">class</span> <span class="o">};</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="nc">String</span><span class="o">[]</span> <span class="nf">getServletMappings</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">String</span><span class="o">[]</span> <span class="o">{</span> <span class="s">"/"</span> <span class="o">};</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">AbstractDispatcherServletInitializer</code>는 <code class="highlighter-rouge">Filter</code> 객체를 편리하게 추가하는 것도 지원한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyWebAppInitializer</span> <span class="kd">extends</span> <span class="nc">AbstractDispatcherServletInitializer</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="nc">Filter</span><span class="o">[]</span> <span class="nf">getServletFilters</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">Filter</span><span class="o">[]</span> <span class="o">{</span>
            <span class="k">new</span> <span class="nf">HiddenHttpMethodFilter</span><span class="o">(),</span> <span class="k">new</span> <span class="nc">CharacterEncodingFilter</span><span class="o">()</span> <span class="o">};</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="processing">Processing</h2>

<p><code class="highlighter-rouge">DispatcherServlet</code> 은 다음과 같이 요청을 처리한다.</p>

<ol>
  <li>컨트롤러나 기타 요소가 사용할 WebApplicationContext를 요청에 바인딩한다. 기본으로 <code class="highlighter-rouge">DispatcherServlet.WEB_APPLICATION_CONTEXT_ATTRIBUTE</code> 키에 바인딩된다.</li>
  <li><code class="highlighter-rouge">LocaleResolver</code>를 요청에 바인딩한다. <code class="highlighter-rouge">Locale</code>은 요청을 처리할 때 (View 렌더링 등)에 사용된다. <code class="highlighter-rouge">Locale</code> 을 결정할 필요 없다면 <code class="highlighter-rouge">LocaleResolver</code>가 없어도 된다.</li>
  <li><code class="highlighter-rouge">ThemeResolver</code>를 요청에 바인딩한다. <code class="highlighter-rouge">ThemeResolver</code>는 뷰와 같은 요소가 테마를 결정할 때 사용한다. 테마를 사용하지 않으면 무시해도 된다.</li>
  <li>특정한 <code class="highlighter-rouge">MultipartFileResolver</code>를 지정했다면 요청에서 파일을 검사한다. 파일이 발견되면 <code class="highlighter-rouge">HttpServletRequest</code>를 추가 처리를 위해 <code class="highlighter-rouge">MultipartHttpServletRequest</code>로 래핑한다.</li>
  <li>적절한 핸들러를 찾는다. 핸들러를 찾으면 모델 또는 렌더링을 준비하기 위해 핸들러와 연관된 실행 흐름(<code class="highlighter-rouge">execution chain</code>),  <code class="highlighter-rouge">preprocessor</code>, <code class="highlighter-rouge">postprocessor</code>, <code class="highlighter-rouge">controller</code> 등을 실행한다. 또 애너테이션이 부여된 컨트롤러의 경우 뷰를 반환하는 대신 HandlerAdapter 내에서 응답을 처리할 수도 있다.</li>
  <li>핸들러가 모델을 리턴하면 뷰가 렌더링된다. 모델이 리턴되지 않으면 (요청을 intercept하는 <code class="highlighter-rouge">preprocessor</code> 나 <code class="highlighter-rouge">postprocessor</code> 때문일 수 있음) 요청이 이미 이행되었을 수 있으므로, 뷰가 렌더링되지 않는다.</li>
  <li><code class="highlighter-rouge">WebApplicationContext</code>가 관리하는 <code class="highlighter-rouge">HandlerExceptionResolver</code> 빈은 위의 요청을 처리하는 중에 발생한 예외를 처리한다.</li>
</ol>

<h2 id="interception">Interception</h2>

<p>모든 <code class="highlighter-rouge">HandlerMapping</code> 인터페이스 구현체는 핸들링 인터셉터를 제공한다. 인터셉터는 특정 요청마다 정해진 기능을 수행할 때 유용하다. 아마도 <code class="highlighter-rouge">Principal</code>을 체크하거나, 로그를 남기는 기능 들이 이에 포함될 것이다.</p>

<p><code class="highlighter-rouge">Interceptor</code>는 반드시 <code class="highlighter-rouge">org.springframework.web.servlet</code>패키지의  <code class="highlighter-rouge">HandlerInterceptor</code>를 구현해야 한다. 이 인터페이스에는 세가지 메서드가 있는데, 이 메서드는 모든 전처리, 후처리를 커버할 수 있다.</p>

<ul>
  <li><code class="highlighter-rouge">preHandle(...)</code> : 실제 핸들러가 실행되기 전</li>
  <li><code class="highlighter-rouge">postHandle(...)</code> : 핸들러가 실행되고 난 후</li>
  <li><code class="highlighter-rouge">afterCompletion(...)</code> : 요청 처리가 끝나고 난 후</li>
</ul>

<p><code class="highlighter-rouge">preHandle(...)</code> 메서드는 불리언을 반환한다. 그래서 실행 흐름(execution chain)을 break하거나 continue하게 만들 수 있다. <code class="highlighter-rouge">ture</code>를 반환하면 실행 흐름이 계속해서 이어진다.(continue) <code class="highlighter-rouge">false</code>를 반환하면 <code class="highlighter-rouge">DispatcherServlet</code>은 인터셉터 스스로 요청을 처리했다고 가정하고 다음 실행 체인(다른 interceptor를 포함한)을 수행하지 않는다.(break)</p>

<p><code class="highlighter-rouge">HandlerAdapter</code>에서 응답을 작성하기 위한 목적이라면, <code class="highlighter-rouge">postHandle</code> 보다는 <code class="highlighter-rouge">@ResponseBody</code>나 <code class="highlighter-rouge">ResponseEntity</code> 가 더 유용하다. 그러므로 응답 헤더를 변경하는 것 같이, 어떤 응답을 변경하는 것은 성능이 좋지 않다. 이 경우, <code class="highlighter-rouge">ResponseBodyAdvice</code>를 구현하고 <code class="highlighter-rouge">ControllerAdive</code>에서 설정하거나 <code class="highlighter-rouge">RequestMappingHandlerAdapter</code>에 직접 설정하는게 좋다.</p>

<h2 id="exception">Exception</h2>

<p>요청을 매핑하면서 예외가 발생하거나, 요청을 처리하면서(@Controller같은 곳에서) 예외가 발생하면 <code class="highlighter-rouge">DispatcherServlet</code>은 <code class="highlighter-rouge">HandlerExceptionResolver</code> 에 예외를 결정하고, 예외를 처리할 수 있도록 위임한다.</p>

<p>다음은 <code class="highlighter-rouge">HandlerExceptionResolver</code>의 구현체 목록이다.</p>

<table>
  <thead>
    <tr>
      <th>HandlerExceptionResolver</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>SimpleMappingExceptionResolver</td>
      <td>예외 클래스 이름과 <code class="highlighter-rouge">Error View</code> 이름을 매핑한다. 브라우저 어플리케이션에서 에러 페이지를 렌더링할 때 유용하다.</td>
    </tr>
    <tr>
      <td>DefaultHandlerExceptionResolver</td>
      <td>Spring MVC가 발생시킨 예외를 HTTP 상태 코드에 매핑한다. 비슷한 역할을 하는 <code class="highlighter-rouge">ResponseEntityExceptionHandler</code>도 있다.</td>
    </tr>
    <tr>
      <td>ResponseStatusExceptionResolver</td>
      <td><code class="highlighter-rouge">@ResponseStatus</code>애너테이션으로 예외를 매핑한다. HTTP 상태 코드도 애너테이션에서 정의한 대로 매핑한다.</td>
    </tr>
    <tr>
      <td>ExceptionHandlerExceptionResolver</td>
      <td><code class="highlighter-rouge">@ExceptionHandler</code>, <code class="highlighter-rouge">@Controller</code>, <code class="highlighter-rouge">@ControllerAdvice</code> 클래스의 메서드로 예외를 매핑한다.</td>
    </tr>
  </tbody>
</table>

<h3 id="chain-of-resolvers">Chain of Resolvers</h3>

<p>여러 <code class="highlighter-rouge">HandlerExceptionResolver</code>빈을 정의하는 것으로 ExceptionResolver를 구성할 수 있다. 스프링 설정으로 이 Resolver들의 순서를 설정할 수 있다. 높은(higher) 순서를 가질수록 Resolver가 체인의 뒤쪽에 위치한다.</p>

<p><code class="highlighter-rouge">HandlerExceptionResolver</code>의 리턴값은 다음 세 가지 종류가 있다.</p>

<ul>
  <li>에러 뷰를 가리키는 <code class="highlighter-rouge">ModelAndView</code>를 리턴</li>
  <li><code class="highlighter-rouge">Resolver</code> 내부에서 예외를 처리했다면 비어있는 <code class="highlighter-rouge">ModelAndView</code>를 리턴</li>
  <li>예외가 아직 결정되지 않았다면, 후순위의 <code class="highlighter-rouge">Resolver</code>가 예외를 핸들링할 수 있도록 <code class="highlighter-rouge">null</code>을 리턴한다. 마지막까지 <code class="highlighter-rouge">null</code>이 계속해서 리턴된다면 <code class="highlighter-rouge">ServletContainer</code>로 버블링된다.</li>
</ul>

<h2 id="view-resolution">View Resolution</h2>

<p>스프링 MVC는 <code class="highlighter-rouge">ViewResolver</code>와 <code class="highlighter-rouge">View</code> 인터페이스를 제공한다. 이 인터페이스들 덕분에 특정 뷰 기술에 종속되지 않고 뷰를 렌더링할 수 있다.</p>

<p><code class="highlighter-rouge">ViewResolver</code>는 뷰 이름과 실제 뷰 이름을 매핑해준다. <code class="highlighter-rouge">View</code>는 특정 뷰 기술에 넘어가기 전에 데이터를 준비한다.</p>

<p>다음은 <code class="highlighter-rouge">ViewResolver</code>의 구현체들이다.</p>

<table>
  <thead>
    <tr>
      <th>ViewResolver</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>AbstractCachingViewResolver</td>
      <td><code class="highlighter-rouge">AbstractCachingResolver</code>의 하위 클래스들은 뷰 인스턴스를 캐싱하고 결정한다. 캐시 모드를 켜고 끌수도 있다. cache 속성을 false하면 된다. 런타임에 뷰 캐시를 리프레시하고 싶다면 <code class="highlighter-rouge">removeFromCache(String viewName, Locale loc)</code> 메서드를 사용하라.</td>
    </tr>
    <tr>
      <td>XmlViewResolver</td>
      <td>스프링 빈 설정과 똑같은 형식의 XML 설정을 가져온다. 기본값은 <code class="highlighter-rouge">/WEB-INF/views.xml</code>에 있다.</td>
    </tr>
    <tr>
      <td>UrlBasedViewResolver</td>
      <td>구체적인 매핑 설정이 없이, URL 이름 기반으로 간단히 매핑한다. 이름이 적절한 뷰 리소스와 잘 일치할 때 적절하게 사용할 수 있다.</td>
    </tr>
  </tbody>
</table>

<blockquote>
  <p>이외 ResourceBundleviewResolver, InternalResourceViewResolver, FreeMarkerViewResolver, ContentNegotiatingViewResolver…. 나머지 생략</p>
</blockquote>

<h3 id="handling">Handling</h3>

<p>여러 빈으로 resolve 체인을 구성할 수 있다. 또 <code class="highlighter-rouge">order</code> 속성을 부여해 순서를 구성할 수도 있다. 여기서도 높은(Higher) <code class="highlighter-rouge">order</code>의 resolver가 나중에(Later) 위치한다.(Higer the order property, Later the view resolver is positioned)</p>

<p>resolve 체인의 뷰 리졸버는 적절한 뷰를 찾지 못한 경우, <code class="highlighter-rouge">null</code>을 리턴할 수도 있다.(<code class="highlighter-rouge">InternalResourceViewResolver</code> 제외)</p>

<p>뷰 리졸버 구성은 간단히 <code class="highlighter-rouge">ViewResolver</code>를 더하는 것으로 구성할 수 있다. <code class="highlighter-rouge">MVC Config</code>를 사용하면 컨트롤러 로직과 관계없이 설정할 수 있으므로, <code class="highlighter-rouge">MVC Coinfig</code>의 기능을 이용하는 것을 추천한다.</p>

<h3 id="redirecting">Redirecting</h3>

<p>뷰 이름에 <code class="highlighter-rouge">redirect:</code> 접두사(prefix)가 붙으면 리다이렉트를 수행한다. <code class="highlighter-rouge">redirect:</code> 뒷부분이 리다이렉트할 URL이 된다.</p>

<p>컨트롤러가 <code class="highlighter-rouge">RedirectView</code>를 반환하는 것과 동일한 동작을 수행한다.</p>

<blockquote>
  <p>컨트롤러 메서드에 <code class="highlighter-rouge">@RersponseStatus</code> 애너테이션이 있으면, 애너테이션의 값이 <code class="highlighter-rouge">RedirectView</code> 상태 코드보다 우선한다.</p>
</blockquote>

<h2 id="multipart-resolver">Multipart Resolver</h2>

<p><code class="highlighter-rouge">org.springframework.web.multipart.MultipartResolver</code>는 파일 업로드를 포함한 멀티파트 요청을 분석하는 전략이다. <code class="highlighter-rouge">Apache Commons FileUpload</code>를 기반으로하는 구현과 Servlet 3.0을 기반으로하는 구현이 있다.</p>

<p>멀티파트를 처리하려면 <code class="highlighter-rouge">DispatcherServlet</code> 구성에서 <code class="highlighter-rouge">multipartResolver</code> 이름으로 <code class="highlighter-rouge">MultipartResolver Bean</code>을 정의해야한다. <code class="highlighter-rouge">DispatcherServlet</code>은 이를 감지하여 요청에 사용한다. 컨텐츠 유형이 multipart / form-data 인 POST 요청이 들어오면, 컨텐츠를 분석하고 현재 <code class="highlighter-rouge">HttpServletRequest</code>를 <code class="highlighter-rouge">MultipartHttpServletRequest</code>로 래핑한다.  <code class="highlighter-rouge">MultipartHttpServletRequest</code>는 요청의 파라미터를 제공하고 실제 컨텐츠에 대한 액세스도 제공한다.</p>

:ET